[{"name":"app.R","content":"library(jsonlite)\r\nlibrary(tibble)\r\nlibrary(shiny)\r\n\r\nquran <- fromJSON(\"https://api.quran.com/api/v3/chapters/\")\r\n\r\nchapters <- tibble(indices = quran$chapters$chapter_number, chapters = quran$chapters$name_simple)\r\nchapters <- chapters[order(chapters$chapters),]\r\n\r\nbinary_search <- function(dataset, keyword, indices) {\r\n    # Sort the data if indices are included\r\n    dataset <- data.frame(\"data\" = dataset)\r\n    if (!missing(indices)) {\r\n        dataset <- data.frame(\r\n            \"data\" = dataset,\r\n            \"indices\" = indices\r\n            )\r\n    }\r\n    \r\n    for (i in 1:length(dataset$data)) {\r\n        dataset$data[i] <- gsub(\" \", \"\", gsub(\"'\", \"\", gsub(\"-\", \"\", tolower(dataset$data[i]))))\r\n    }\r\n    \r\n    dataset <- dataset[order(dataset$data),]\r\n    \r\n    # Search\r\n    first <- 1\r\n    last <- length(dataset$data)\r\n    position <- -1\r\n    middle <- 0\r\n    found <- FALSE\r\n    \r\n    while ((!found) && (first <= last)) {\r\n        middle <- round(abs((first + last) / 2))\r\n        \r\n        set <- dataset$data[middle]\r\n        key <- gsub(\" \", \"\", gsub(\"'\", \"\", gsub(\"-\", \"\", tolower(keyword))))\r\n        \r\n        print(set)\r\n        print(key)\r\n        print(middle)\r\n        \r\n        if (set == key) {\r\n            found <- TRUE\r\n            position <- middle\r\n        } else if (set > key) {\r\n            last <- middle - 1\r\n        } else {\r\n            first <- middle + 1\r\n        }\r\n    }\r\n    \r\n    if (!missing(indices) && position != -1) {\r\n        return (dataset$indices[position])\r\n    } else {\r\n        first <- 1\r\n        last <- length(dataset$data)\r\n        middle <- 0\r\n        found <- FALSE\r\n        \r\n        while ((!found) && (first <= last)) {\r\n            middle <- round(abs((first + last) / 2))\r\n            \r\n            set <- dataset$data[middle]\r\n            key <- gsub(\" \", \"\", gsub(\"'\", \"\", gsub(\"-\", \"\", tolower(keyword))))\r\n            \r\n            if (match_string(key, set)) {\r\n                found <- TRUE\r\n                position <- middle\r\n            } else if (match_string(set, key)) {\r\n                found <- TRUE\r\n                position <- middle\r\n            } else if (set > key) {\r\n                last <- middle - 1\r\n            } else {\r\n                first <- middle + 1\r\n            }\r\n        }\r\n        return (dataset$indices[position])\r\n    }\r\n}\r\n\r\nmatch_string <- function(haystack, needle) {\r\n    # Convert string to vector (not necessary but makes things easier)\r\n    haystack <- strsplit(haystack, \"\")[[1]]\r\n    needle <- strsplit(needle, \"\")[[1]]\r\n    \r\n    i <- 1\r\n    j <- 1\r\n    match <- FALSE\r\n    \r\n    while ((match == FALSE) && (i < length(haystack))) {\r\n        if (needle[j] == haystack[i]) {\r\n            j <- j + 1\r\n            if (j == length(needle)) {\r\n                match <- TRUE\r\n            }\r\n        } else {\r\n            j <- 1\r\n        }\r\n        i <- i + 1\r\n    }\r\n    \r\n    return (match)\r\n}\r\n\r\ncapitalize <- function(string) {\r\n    return (paste(sep = \"\",\r\n        toupper(substr(string, 1, 1)),\r\n        substr(string, 2, nchar(string))))\r\n}\r\n\r\nmake_ordinal <- function(number) {\r\n    suffixes <- c(\"st\", \"nd\", \"rd\")\r\n    \r\n    number <- as.character(number)\r\n    len <- nchar(number)\r\n    last_digit <- substr(number, len, len)\r\n    suffix <- \"th\"\r\n    \r\n    before_last_digit <- \"0\"\r\n    if (len > 1) {before_last_digit = substr(number, len - 1, len - 1)}\r\n    if ((last_digit %in% c(\"1\", \"2\", \"3\")) && (before_last_digit != \"1\")) {suffix <- suffixes[as.integer(last_digit)]}\r\n    \r\n    print(suffix)\r\n    \r\n    return (paste(number, suffix, sep = \"\"))\r\n}\r\n\r\n###\r\nui <- fluidPage(\r\n    tags$head(\r\n        tags$link(rel = \"stylesheet\", type = \"text/css\", href = \"style.css\")),\r\n    \r\n    div(style = \"max-width: 1000px; margin: 0 auto; text-align: justify;\",\r\n        div(style = \"font-size: 2em\",\r\n            titlePanel(\r\n                div(\"Chapters in The Noble Quran\", class = \"title\"),\r\n                windowTitle = \"Chapters in The Noble Quran\"\r\n                ),\r\n            div(\r\n                span(style = \"h4\", \"by Dimas Atha Putra\"),\r\n                span(style = \"font-size: .5em\", \"230605110052\")\r\n                )\r\n            ),\r\n        \r\n        hr(),\r\n        \r\n        sidebarLayout(\r\n            sidebarPanel(\r\n                textInput(\"keyword\", \"What chapter?\")\r\n            ),\r\n            \r\n            # Show a plot of the generated distribution\r\n            mainPanel(\r\n                div(style=\"max-width: 1000px; margin: 0 auto; text-align: center;\",\r\n                    uiOutput(\"found\")\r\n                )\r\n            )\r\n        ),\r\n        uiOutput(\"info\")\r\n    ),\r\n)\r\n\r\nserver <- function(input, output) {\r\n    output$found <- renderUI({\r\n        keyword <- \"Maryam\"\r\n        if (input$keyword != \"\") {\r\n            keyword <- input$keyword\r\n        }\r\n        \r\n        pos <- binary_search(chapters$chapters, keyword, chapters$indices)\r\n        \r\n        if (pos != -1) {\r\n            chapter_name <- quran$chapters$name_complex[pos]\r\n            chapter_number <- quran$chapters$chapter_number[pos]\r\n            chapter_verses <- quran$chapters$verses_count[pos]\r\n            chapter_revelated <- quran$chapters$revelation_order[pos]\r\n            chapter_town <- quran$chapters$revelation_place[pos]\r\n            \r\n            div(style = 'font-family: \"Century\"',\r\n                h2(paste(chapter_name, \", the \", make_ordinal(chapter_number), \" chapter in The Noble Quran.\", sep = \"\")),\r\n                p(paste(\"Consists of \", chapter_verses, \" verses, it is the \", make_ordinal(chapter_revelated), \" revelation in the town of \", capitalize(chapter_town), sep = \"\"))\r\n            )\r\n        } else {\r\n            div(style = 'font-family: \"Century\"',\r\n                h3(\"Chapter not found.\"),\r\n                p(\"Try guessing for the correct transliteration of the chapter. It should be \\\"Al-Fatihah\\\" instead of \\\"AlFatihah\\\"\")\r\n            )\r\n        }\r\n    })\r\n    \r\n    output$info <- renderUI({\r\n        keyword <- \"Maryam\"\r\n        if (input$keyword != \"\") {\r\n            keyword <- input$keyword\r\n        }\r\n        \r\n        pos <- binary_search(chapters$chapters, keyword, chapters$indices)\r\n        \r\n        if (pos != -1) {\r\n            chapter_info <- fromJSON(paste(\"https://api.quran.com/api/v3/chapters/\", pos, \"/info\", sep = \"\"))\r\n            div(\r\n                div(style = 'font-family: \"Amiri\"; font-size: 10vw; text-align: center', quran$chapters$name_arabic[pos]),\r\n                HTML(gsub(\"\\\\\\\\\", \"\", chapter_info$chapter_info$text))\r\n            )\r\n        }\r\n    })\r\n}\r\n\r\n# Run the application \r\nshinyApp(ui = ui, server = server)\r\n","type":"text"},{"name":"www/style.css","content":"body {font-family: \"Century\"}\r\n\r\n.code {font-family: \"Courier Prime\";\r\n  color = black;\r\n  background = gray;\r\n}\r\n\r\ndiv {font-family: \"Century\"}\r\np {font-size: 1.25em; font-family: \"Century\"}\r\ncode {font-family: \"Courier Prime\";\r\n  color = black;\r\n  background = gray;\r\n}\r\n\r\nh1, h2, h3, h4 {font-family: \"Century\"}\r\n\r\nh1 {font-weight: 700; font-size: 3em}\r\nh2 {font-weight: 600; font-size: 1.5em}\r\nh3 {font-weight: 500; font-size: 1.25em}\r\nh4 {font-weight: 400; font-size: 1em}\r\n\r\n.math {font-size: 1em}\r\n\r\n::-moz-selection {\r\n  color: #eee;\r\n  background: #111;\r\n}\r\n::selection {\r\n  color: #eee;\r\n  background: #111;\r\n}","type":"text"}]
